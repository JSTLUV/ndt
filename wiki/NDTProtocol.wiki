#summary Description of the NDT Protocol

= Network Diagnostic Tool Protocol (NDTP) =

== Abstract == 

Network Diagnostic Tool (NDT) is a client/server program that provides network configuration and performance testing to a user's computer. It uses a well-defined protocol to provide a reliable communication link between its subcomponents. This protocol documentation is sufficient to allow outside parties to write compatible NDT clients without consulting the NDT source code. This documentation contains a state transition diagrams detailing the various states that the components (both server and client) can be in, and the valid messages that can or will be transmitted or received in those states.

== Table of Contents ==

<wiki:toc max_depth="3" />

== Introduction ==

Several studies have shown that the majority of network performance problems occur in or near the users’ desktop/laptop computer.  These problems include, but are not limited to, duplex mismatch conditions on Ethernet/FastEthernet links, incorrectly set TCP buffers in the user’s computer, or problems with the local network infrastructure. NDT seeks to determine why a network connection exhibits certain performance characteristics. In addition to measuring the familiar upload and download speeds of a user's connection, NDT also performs tests that can assess factors such as latency, packet loss, congestion, bad cables, and bottlenecks on the end-to-end path from client to server. 

NDT popularity has grown in recent years, which led to an increased interest from the developers community around the world. People started to integrate NDT with their systems using different approaches, like adding Web Developer's API to Web based (java applet) client and writing new mobile (Android based) client.

NDTP is allowing outside parties to easily extend both NDT server and client parts and write compatible clients in new languages that will be able to communicate with the publicly available Measurement Lab servers.

In this document, the key words "MUST", "REQUIRED", "SHOULD", "RECOMMENDED", and "MAY" are to be interpreted as described in [http://www.ietf.org/rfc/rfc2119.txt RFC2119].

=== Relationship of Tests and Control Protocols ===

NDTP actually consists of two inter-related set of protocols: NDTP-Control and NDTP-Tests. NDTP-Control is used to initiate, start, and stop test sessions and to fetch their results, whereas NDTP-Tests is a set of smaller sub-protocols used to exchange test packets between two measurement nodes.

NDTP-Tests consists of five smaller sub-protocols: Middlebox test, Simple firewall test, C2S throughput test, S2C throughput test and META test. These tests are completely independent from each other and can be run in any order. Moreover, new NDTP-Tests protocols can be easily created and integrated into the existing tests ecosystem.

NDTP-Control is designed to support the negotiation of test sessions and results retrieval in a straightforward manner. At session initiation, there is a negotiation of the test suite and session start time. Moreover, server version is being verified to discover the possibility of incompatibilities. Additionally, NDTP-Control defines an exact message format, which greatly increase the general protocol reliability and allows other NDTP-Tests protocols to communicate in a convenient and secure fashion.

We believe that NDTP-Control protocol can effectively be used to implement not only new types of clients, but also can be treated as a generic framework to create and combine with each other completely new NDTP-Tests protocols.

=== Logical Model ===

We can distinguish several different roles on both NDTP-Control and NDTP-Tests levels. Specifically, we define the following:

|| Session-Sender || The sending endpoint of a NDTP-Tests session. ||
|| Session-Receiver || The receiving endpoint of a NDTP-Tests session. ||
|| Server || An end system that manages NDTP-Control and NDTP-Tests sessions, performs the specific tests needed to determine what problems, if any, exist. The server process then analyzes the test results and returns these results to the client. ||
|| Client || An end system that initiates requests for NDTP-Tests sessions, triggers the start of a set of sessions and receives tests results. ||

Different logical roles can be played by the same host. For example server machine is a session-sender in the S2C throughput test, while it is a session-receiver in the C2S throughput test.

For example, please look at the figures describing two main NDTP-Tests protocols:

 * C2S throughput test

{{{
       +----------------+                    +------------------+
       |     Client     |<---NDTP-Control--->|     Server       |
       |                |                    |                  |
       | Session-Sender |----NDTP-Test------>| Session-Receiver |
       +----------------+                    +------------------+
}}}

 * S2C throughput test

{{{
       +------------------+                    +------------------+
       |     Client       |<---NDTP-Control--->|     Server       |
       |                  |                    |                  |
       | Session-Receiver |<---NDTP-Test-------|  Session-Sender  |
       +------------------+                    +------------------+
}}}

== Protocol Overview ==
== NDTP-Control ==
== NDTP-Tests ==
=== Middlebox test ===
=== Simple firewall test ===
=== C2S throughput test ===
=== S2C throughput test ===
=== META test ===
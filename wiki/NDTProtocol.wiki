#summary Description of the NDT Protocol

= Network Diagnostic Tool Protocol (NDTP) =

== Abstract == 

Network Diagnostic Tool (NDT) is a client/server program that provides network configuration and performance testing to a user's computer. It uses a well-defined protocol to provide a reliable communication link between its subcomponents. This protocol documentation is sufficient to allow outside parties to write compatible NDT clients without consulting the NDT source code. This documentation contains a state transition diagrams detailing the various states that the components (both server and client) can be in, and the valid messages that can or will be transmitted or received in those states.

== Table of Contents ==

<wiki:toc max_depth="4" />

== Introduction ==

Several studies have shown that the majority of network performance problems occur in or near the users’ desktop/laptop computer.  These problems include, but are not limited to, duplex mismatch conditions on Ethernet/FastEthernet links, incorrectly set TCP buffers in the user’s computer, or problems with the local network infrastructure. NDT seeks to determine why a network connection exhibits certain performance characteristics. In addition to measuring the familiar upload and download speeds of a user's connection, NDT also performs tests that can assess factors such as latency, packet loss, congestion, bad cables, and bottlenecks on the end-to-end path from client to server. 

NDT popularity has grown in recent years, which led to an increased interest from the developers community around the world. People started to integrate NDT with their systems using different approaches, like adding Web Developer's API to Web based (java applet) client and writing new mobile (Android based) client.

NDTP is allowing outside parties to easily extend both NDT server and client parts and write compatible clients in new languages that will be able to communicate with the publicly available Measurement Lab servers.

In this document, the key words "MUST", "REQUIRED", "SHOULD", "RECOMMENDED", and "MAY" are to be interpreted as described in [http://www.ietf.org/rfc/rfc2119.txt RFC2119].

=== Relationship of Tests and Control Protocols ===

NDTP actually consists of two inter-related sets of protocols: NDTP-Control and NDTP-Tests. NDTP-Control is used to initiate, start, and stop test sessions and to fetch their results, whereas NDTP-Tests is a set of smaller sub-protocols used to exchange test packets between two measurement nodes.

NDTP-Tests consists of five smaller sub-protocols: Middlebox test, Simple firewall test, C2S throughput test, S2C throughput test and META test. These tests are completely independent from each other and can be run in any order. Moreover, new NDTP-Tests protocols can be easily created and integrated into the existing tests ecosystem.

NDTP-Control is designed to support the negotiation of test sessions and results retrieval in a straightforward manner. At session initiation, there is a negotiation of the test suite and session start time. Moreover, server version is being verified to discover the possibility of incompatibilities. Additionally, NDTP-Control defines an exact message format, which greatly increase the general protocol reliability and allows other NDTP-Tests protocols to communicate in a convenient and secure fashion.

We believe that NDTP-Control protocol can effectively be used to implement not only new types of clients, but also can be treated as a generic framework to create and combine with each other completely new NDTP-Tests protocols.

=== Logical Model ===

We can distinguish several different roles on both NDTP-Control and NDTP-Tests levels. Specifically, we define the following:

|| *Role* || *Description* ||
|| Session-Sender || The sending endpoint of a NDTP-Tests session. ||
|| Session-Receiver || The receiving endpoint of a NDTP-Tests session. ||
|| Server || An end system that manages NDTP-Control and NDTP-Tests sessions, performs the specific tests needed to determine what problems, if any, exist. The server process then analyzes the test results and returns these results to the client. ||
|| Client || An end system that initiates requests for NDTP-Tests sessions, triggers the start of a set of sessions and receives tests results. ||

Different logical roles can be played by the same host. For example server machine is a session-sender in the S2C throughput test, while it is a session-receiver in the C2S throughput test.

For example, please look at the figures describing two main NDTP-Tests protocols:

 * C2S throughput test

{{{
       +----------------+                    +------------------+
       |     Client     |<---NDTP-Control--->|     Server       |
       |                |                    |                  |
       | Session-Sender |----NDTP-Test------>| Session-Receiver |
       +----------------+                    +------------------+
}}}

 * S2C throughput test

{{{
       +------------------+                    +------------------+
       |     Client       |<---NDTP-Control--->|     Server       |
       |                  |                    |                  |
       | Session-Receiver |<---NDTP-Test-------|  Session-Sender  |
       +------------------+                    +------------------+
}}}

== Protocol Overview ==

As described above, NDTP consists of two inter-related sets of protocols: NDTP-Control and NDTP-Tests. Both of them are layered over TCP. The former is used to initiate and control test sessions and to fetch their results. The latter set of protocols is used to perform specific tests.

The initiator of the test session establishes a TCP connection to a well-known port, 3001, on the target point and this connection remains open for the duration of the NDTP-Tests sessions.  A NDT server SHOULD listen to this well-known port.

NDTP-Control messages are transmitted before NDTP-Tests sessions are actually started, after they are completed and between particular tests from the performed test suite. Moreover, specific tests also use NDTP-Control messages to synchronise test sessions, exchange configuration data and additional information.

All multi-octet quantities defined in this document are represented as unsigned integers in network byte order unless specified otherwise.

== NDTP-Control ==

The type of each NDTP-Control message can be found after reading the first octet. The length of each NDTP-Control message can be computed upon reading its fixed-size part. No message is shorter than 3 octets.

An implementation SHOULD expunge unused state to prevent denial-of-service attacks, or unbounded memory usage, on the server.  For example, if the full control message is not received within some number of minutes after it is expected, the TCP connection associated with the NDTP-Control session SHOULD be dropped.  In absence of other considerations, 10 minutes seems like a reasonable upper bound.

=== Message structure ===

Each of the NDTP-Control messages always has the following format:

{{{
      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |      TYPE     |            LENTGH             |               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               |
     |                                                               |
     |                                                               |
     .                                                               .
     .                                                               .
     .                                                               .
     |                                                               |
     |                                                               |
     |                                                               |
     |                 Message (up to 65545 octets)                  |
     |                                                               |
     |                                                               |
     |                                                               |
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
}}}

=== Message types ===

NDTP-Control currently defines the following types of messages:

|| *C constant name* || *Bit value* || *Description* ||
|| COMM_FAILURE || 0 || Notification about communication link failure. *Not used explicitly* ||
|| SRV_QUEUE || 1 || Message used to clients' queue management ||
|| MSG_LOGIN || 2 || Used during initialisation to negotiate NDT version and test suite ||
|| TEST_PREPARE || 3 || Used to send all information needed for a particular test (i.e. port numbers, test time, etc.) ||
|| TEST_START || 4 || Message used to start a specific test ||
|| TEST_MSG || 5 || Used during tests to communicate between Client and Server ||
|| TEST_FINALIZE || 6 || Message used to end a specific test ||
|| MSG_ERROR || 7 || Used to send error messages and notifications about invalid states of the test session ||
|| MSG_RESULTS || 8 || Contains final test sessions' results ||
|| MSG_LOGOUT || 9 || This is the last message send by server after MSG_RESULTS messages. Server SHOULD close the NDTP-Control connection after sending this message. ||
|| MSG_WAITING || 10 || Message from the client to notify server that the client is still alive ||

=== Connection Setup ===

==== Logging in to server with a test suite request ====

Before Client can start test sessions, it has to establish a connection to the server.

First, a client opens a TCP connection to the server on a well-known port 3001 and sends a LOGIN message:

{{{
      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |      2        |              1                |     TESTS     |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
}}}

Where TESTS is a bitwise OR of the tests' ids that should be run in a requested test-suite.

All new clients SHOULD always request TEST_STATUS (16 (1L << 4)) test in order to notify server that they support MSG_WAITING messages introduced in NDT v3.5.5.

==== Kick off message to disconnect old clients ====

In the same time Server sends the specially crafted 13 octets long data that kicks off the old clients ("123456 654321"):

{{{
      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |     '1'       |     '2'       |     '3'       |     '4'       |
     |     '5'       |     '6'       |     ' '       |     '6'       |
     |     '5'       |     '4'       |     '3'       |     '2'       |
     |     '1'       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     +-+-+-+-+-+-+-+-+
}}}

All non-compatible clients SHOULD drop the connection after receiving the above message.

==== Queuing clients ====

In the next step NDT server is calculating if it can handle client request and client SHOULD expect at least one 'SRV_QUEUE' message. This message MAY contain one of the following string values:

|| *SRV_QUEUE value* || *Description* ||
|| "0" || Test session will start now ||
|| "9977" || Server Fault: test session will be terminated for unknown reason. Client SHOULD drop the connection after receiving this message. *Not used currently by the server* ||
|| "9988" || If this is a first message from server, then it means that server is busy. In other cases it means Server Fault. Client SHOULD drop the connection after receiving this message. ||
|| "9999" || Server Busy: Please wait 60 seconds for the current test to finish. Client SHOULD drop the connection after receiving this message. *Deprecated/Not used by the server* ||
|| "9990" || This is a check from server to verify if the client is alive. Available from v3.5.5. The client SHOULD respond to this message by sending 'MSG_WAITING' empty message. Server will only send these messages when client requested TEST_STATUS test. ||
|| "N" || Where N is any other value. It means the estimated number of minutes that client will wait for its test to begin. ||

When server decides that client can start its test session, it sends SRV_QUEUE message with value *"0"*:

{{{
      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |      1        |              1                |     '0'       |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
}}}


==== Verifying version compatibility ====

At the beginning of the test session server and client MUST verify their version compatibility.

Server MUST send a MSG_LOGIN message containing its version identifier in the following form:

{{{
      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |      2        |          LENGTH               |     'v'       |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     |                       VERSION number                          |
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
}}}

where VERSION is the current NDT version, for example *3.6.4*.

It is RECOMMENDED, that client will display a warning message in case of the difference. Moreover, client MAY also drop a connection when incompatibility is too big.

==== Negotiating test suite ====

In the next step server MUST send a list of tests' ids that will be performed. This list is a string containing space separated numbers that describes particular tests. The test suite containing all five tests (Middlebox test, Simple firewall test, C2S throughput test, S2C throughput test and META test) will have the following description:
{{{
1 8 2 4 32
}}}

The tests MUST be performed in the order received from server. It is RECOMMENDED that client will drop the connection when it receives unknown test id.

== NDTP-Tests ==

NDTP-Tests currently defines the following types of tests:

|| *C constant name* || *Integer value* || *Description* ||
|| TEST_MID || 1 (1L << 0) || Middlebox test - a short throughput S2C test with a limited CWND to check for a duplex mismatch condition ||
|| TEST_C2S || 2 (1L << 1) || C2S throughput test ||
|| TEST_S2C || 4 (1L << 2) || S2C throughput test ||
|| TEST_SFW || 8 (1L << 3) || Simple firewall test ||
|| TEST_META || 32 (1L << 5) || META test ||

Moreover, NDT v3.5.5 introduced a new mechanism to avoid zombie clients (i.e. queued clients that will never start their test session). In order to enable this mechanism client MUST add the following test to its test suite request:

|| *C constant name* || *Integer value* || *Description* ||
|| TEST_STATUS || 16 (1L << 4) || Special flag to notify server that this client will respond to status requests ||

It is highly RECOMMENDED that all new clients support TEST_STATUS mechanism.

=== Middlebox test ===
=== Simple firewall test ===
=== C2S throughput test ===
=== S2C throughput test ===
=== META test ===
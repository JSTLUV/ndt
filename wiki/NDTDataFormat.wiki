#summary Description of the data collected by NDT

=Data collected by the NDT= 

== Abstract == 

The Network Diagnostic Tool (NDT) is a client/server program that provides network configuration and performance testing to a user's computer. The measured factors along with some additional analysis and detailed test traces are stored by the server for the future reuse. Moreover, multi-level results allow novice and expert users to view and understand the test results.

== Table of Contents ==

<wiki:toc max_depth="3" />

== Introduction ==

The NDT uses the following files to store the test results data:

|| *File* || *Scope of the collected data* || *Always used?* ||
|| *tcpdump trace* || C2S/S2C tests || *NO* (enabled by `-t, --tcpdump` options) ||
|| *web100 snaplog trace* || C2S/S2C tests || *NO* (enabled by `--snaplog` option) ||
|| *web100srv.log* || test session || YES ||
|| *cputime trace* || test session || *NO* (enabled by `--cputime` option) ||
|| *meta data file* || test session || YES ||

==Collected data formats==

===tcpdump trace===

Writing tcpdump trace file is enabled by `-t, --tcpdump` options.

This is a standard trace file for all packets (except the initial syn & syn/ack exchange) written using [http://www.tcpdump.org/ pcap] library.

===web100 snaplog trace===

Writing snaplog file is enabled by `--snaplog` option.

This file contains all the the [http://www.web100.org/ web100] kernel MIB variables' values written in a fixed time (default is 5 msec) increments. The list of logged variables with a short description can be found in the [NDTProtocol#Appendix_A._web100_variables NDT Protocol document].

===web100srv.log file===

The NDT always writes a one-line summary of the test to the web100srv.log file. This one-line summary contains the final values of some of the web100 variables with an additional analysis details.

The particular values are separated with commas without any spaces. The results are stored with the following order:

|| *#* || *Name* || *Description/Comment* ||
|| 1. || date || start time of the test session (in the form "Wed Jun 30 21:49:08 1993\n") ||
|| 2. || client name || remote (client) host fully qualified name ||
|| 3. || MID throughput speed || CWND limited throughput speed measured during Middlebox test (kb/s) ||
|| 4. || S2C throughput speed || value in kb/s ||
|| 5. || C2S throughput speed || value in kb/s ||
|| 6. || Timeouts || The number of times the retransmit timeout has expired when the RTO backoff multiplier is equal to one. ||
|| 7. || SumRTT || ||
|| 8. || CountRTT || ||
|| 9. || PktsRetrans || ||
|| 10. || FastRetran || ||
|| 11. || DataPktsOut || ||
|| 12. || AckPktsOut || ||
|| 13. || CurrentMSS || ||
|| 14. || DupAcksIn || ||
|| 15. || AckPktsIn || ||
|| 16. || MaxRwinRcvd || ||
|| 17. || Sndbuf || ||
|| 18. || MaxCwnd || ||
|| 19. || SndLimTimeRwin || ||
|| 20. || SndLimTimeCwnd || ||
|| 21. || SndLimTimeSender || ||
|| 22. || DataBytesOut || ||
|| 23. || SndLimTransRwin || ||
|| 24. || SndLimTransCwnd || ||
|| 25. || SndLimTransSender || ||
|| 26. || MaxSsthresh || ||
|| 27. || CurrentRTO || ||
|| 28. || CurrentRwinRcvd || ||
|| 29. || link || ||
|| 30. || mismatch || ||
|| 31. || bad_cable || ||
|| 32. || half_duplex || ||
|| 33. || congestion || ||
|| 34. || c2sdata || ||
|| 35. || c2sack || ||
|| 36. || s2cdata || ||
|| 37. || s2cack || ||
|| 38. || CongestionSignals || ||
|| 39. || PktsOut || ||
|| 40. || MinRTT || ||
|| 41. || RcvWinScale || ||
|| 42. || autotune || ||
|| 43. || CongAvoid || ||
|| 44. || CongestionOverCount || ||
|| 45. || MaxRTT || ||
|| 46. || OtherReductions || ||
|| 47. || CurTimeoutCount || ||
|| 48. || AbruptTimeouts || ||
|| 49. || SendStall || ||
|| 50. || SlowStart || ||
|| 51. || SubsequentTimeouts || ||
|| 52. || ThruBytesAcked || ||
|| 53. || peaks.min || ||
|| 54. || peaks.max || ||
|| 55. || peaks.amount || ||

===cputime trace===

This file contains lines with `times` routine results recorded using a 100ms interval.

===meta data file===

This meta data file contains the names of the other files, the clients & servers IP addr and FQDN, and the encoded line of the web100/analysis data. A sample of that data is
 
{{{
[iupui_ndt@mlab1 ~]$ cat /usr/local/ndt/serverdata/
2009/10/09/20091009T20:46:28.
141927000Z_149.20.53.166:63251.meta
Date/Time: 20091009T20:46:28.141927000Z
c2s_snaplog file: 20091009T20:46:28.141927000Z_149.20.53.166:60102.c2s_snaplog.gz
c2s_ndttrace file: 20091009T20:46:28.141927000Z_149.20.53.166:60102.c2s_ndttrace.gz
s2c_snaplog file:
s2c_ndttrace file: 20091009T20:46:28.141927000Z_149.20.53.166:61730.s2c_ndttrace.gz
cputime file:
server IP address: 4.71.254.147
server hostname: mlab1.atl01.measurement-lab.org
server kernel version: 2.6.22.19-vs2.3.0.34.32.mlab.pla
client IP address: 149.20.53.166
client hostname: nb.tech.org
client OS name:
client_browser name:
Summary data:313,2246,1658,0,69963,1020,19,8,1961,0,1448,392,1428,525600,112560,
43440,0,10001122,25307,2899352,0,15,15,21720,270,525600,100,0,0,0,1,6,2,8,10,8,1961,
66,10,22,964,0,166,0,-1208754176,3,0,31,0,360,1448,43440,8
}}}

==Displaying collected data==

The tcpdump files can be read using [http://www.tcpdump.org/ tcpdump] and [http://www.tcptrace.org/ tcptrace] programs.

The NDT package comes with a utility (called genplot) that can convert snaplog trace files into text or xplot graph files. Alternatively the user can write their own analysis program using the web100 library functions.

The NDT server also contains a Java application that can look through the NDT log files and link log entries to trace files, and it also simplifies the viewing of this data. The utility will need to be rewritten slightly to take advantage of the meta files instead of (in addition to) the log files.
 
The detailed tcpdump and snaplog files can be used to re-examine the test to see what happened, i.e.:
  * was there packet loss during the s2c test, and if so when/how often did it occur? 
  * what was the maximum throughput during TCP's slow-start growth phase? 
  * how many times did TCP oscillate in the Congestion Avoidance phase? 
  * did the test compete with other traffic? 
  * was there non-congestive loss on the path? 
  * was the test limited by the user's PC (default tunable settings)? 
  * how often did TCP retransmit packets, and were any of these unnecessary? 
  * were packets being reordered (e.g., sent 1, 2, 3, 4, 5 but received 1, 2, 4, 3, 5) 
  * what was the capacity of the bottleneck link in this path? 
  * did the test produce the expected results? 
  * was the client connected to a wired or wireless (WiFi) network? 
  * is there a firewall and/or NAT box in the path?
 
More information about NDT:
http://www.internet2.edu/performance/ndt/
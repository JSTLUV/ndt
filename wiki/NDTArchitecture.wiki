#summary Description of the NDT architecture and life cycle

=NDT architecture and life cycle=

== Abstract ==

The Network Diagnostic Tool (NDT) is a client/server program that provides network configuration and performance testing to a user's computer. The NDT consists of several modules responsible for various aspects of the [NDTTestMethodology test methodology]. This document identifies where in the overall codebase each of the high-level components reside to help with future development and maintenance. It also includes build instructions and documents the build and packaging process.

== Table of Contents ==

<wiki:toc max_depth="3" />

== Introduction ==

Only NDT Client and NDT Server are needed to perform all tests defined by the [NDTProtocol NDT Protocol]. However, the full NDT suite consists of the wide spectrum of tools that can be used for different purposes. We can specify three categories of the NDT components based on their areas of usage:
 * Client Tools
 * Server Tools
 * Administrative Tools

The NDT project is hosted on the [http://code.google.com/p/ndt Google Project Hosting] infrastructure. The latest project source code can be obtained anonymously over HTTP by using the following command:

{{{svn checkout http://ndt.googlecode.com/svn/trunk/ ndt-read-only}}}

Moreover, it can be also obtained by downloading the newest tar package from the download page:

{{{http://code.google.com/p/ndt/downloads}}}

== Architecture Overview ==

After downloading the NDT sources, we can find the NDT components in the following directories:
 * src:
   {{{ }}}*web100clt*{{{, }}}*web100srv*{{{, fakewww, analyze, viewtrace, tr-mkmap, genplot}}}
 * Applet:
   {{{ }}}*Tcpbw100.jar*
 * Admin:
   {{{ }}}Admin.class
 * janalyze/src:
   {{{ }}}JAnalyze.jar

The brief information about each of the NDT component can be found in the following table. All sources locations are relative to the root of the checked out sources from the code repository.

|| *Component Name* || *Type* || *Description* || *Sources Location* ||
|| *web100clt* || Client Tools || The NDT Client application (used from command line). || *src* <br/><br/> {{{web100clt.c network.c usage.c logging.c utils.c protocol.c test_sfw_clt.c test_mid_clt.c test_c2s_clt.c test_s2c_clt.c test_meta_clt.c}}} ||
|| *Tcpbw100.jar* || Server/Client Tools || The Java Applet-based client that requires JVM browser plugin installed at the client machine. || *Applet* <br/><br/> {{{Tcpbw100.java}}}||
|| *web100srv* || Server Tools || The NDT Server application. || *src* <br/><br/> {{{web100srv.c web100-util.c web100-pcap.c web100-admin.c network.c usage.c utils.c mrange.c logging.c testoptions.c protocol.c test_sfw_srv.c test_meta_srv.c ndt_odbc.c}}} ||
|| fakewww || Server Tools || Optional 'lite' web server. || *src* <br/><br/> {{{fakewww.c troute.c troute6.c tr-tree.c tr-tree6.c network.c usage.c logging.c}}} ||
|| analyze || Administrative Tools || Console based utility application that can look through the NDT log files and display the old test results. || *src* <br/><br/> {{{analyze.c usage.c logging.c}}} ||
|| viewtrace || Administrative Tools || Console based utility application that can read [NDTDataFormat#tcpdump_trace tcpdump trace] files to perform packet pair timings to determine [NDTTestMethodology#Bottleneck_Link_Detection what type of bottleneck link exists] on the analyzed path. || *src* <br/><br/> {{{viewtrace.c usage.c logging.c utils.c}}} ||
|| tr-mkmap || Administrative Tools || Console based utility application that can build a default traceroute tree between all federated NDT servers. The fakewww web server uses such pre-built traceroute trees to redirect clients to the closest NDT servers. || *src* <br/><br/> {{{tr-mkmap.c tr-tree.c tr-tree6.c usage.c logging.c}}} ||
|| genplot || Administrative Tools || Console based utility that can read [NDTDataFormat#web100_snaplog_trace web100 snaplog trace] files and generate xplot graphs from the obtained web100 variables. || *src* <br/><br/> {{{genplot.c usage.c}}} ||
|| JAnalyze.jar || Administrative Tools || Java based utility application that can look through the NDT log files and display the old test results (along with displaying existing snaplog/tcpdump trace files and additional graphs). || *janalyze/src* <br/><br/> {{{DBConfFrame.java Helpers.java LoadingDBFrame.java MaxPeakInfo.java PeakInfo.java ResultsContainer.java SimpleTextPane.java SwingWorker.java FilterFrame.java JAnalyze.java LoadingFrame.java MinPeakInfo.java PropertyListener.java ResultsList.java SnaplogFrame.java}}} ||
|| Admin.class || Administrative Tools || The Java Applet-based application that provides an administrator view of the NDT usage statistics (this applet is responsible for drawing the bar graph that appears on the admin view html page). || *Admin* <br/><br/> {{{Admin.java}}} ||

== Life Cycle ==

The NDT client and server interaction details can be found in the [NDTProtocol#Protocol_description NDT Protocol description].

=== Test session with the Java Applet-based client ===

A basic NDT test session with the Java Applet-based client looks as following:

*TODO - add a basic flow chart for the NDT session with a federated fakewww*

 # The process starts with the user opening a browser and entering the NDT server URL
   * An optional step is to point to a well known server and accept a redirect message (Federated mode)
   * Otherwise the URL points to the NDT server itself (either an apache web server or the fakewww process answer the request)
 # The web server responds by returning the page, with an embedded java applet (class or jar file)
 # The user must manually request a test be performed by clicking the “start” button
 # The applet opens a connection back to the server’s testing engine (web100srv process)
 # A child process is created to handle the test and the parent goes back to listening for more test requests. The parent keeps a FIFO queue to process multiple requests.
 # A control channel is created between the server and client to control the client’s actions and synchronize the start of the various tests. The server and the client negotiate the test suite.
 # The NDT client and the NDT server performs the negotiated test suite. The client opens new data channels back to the server for testing purposes. Allowing the client to open connections makes it easy to get past client-side firewall boxes.
 # The server extracts the Web100 data and analyzes the connection for faults.
 # The results are recorded in the servers’ log file and the results are returned to the client for display to the user.

=== Test session with the web100clt client ===

A basic NDT test session with the web100clt client looks as following:

*TODO - add a basic flow chart for the NDT session with web100clt*

 # The process starts with connecting to the server's testing engine (web100srv process) by the web100clt client.
 # A child process is created to handle the test and the parent goes back to listening for more test requests. The parent keeps a FIFO queue to process multiple requests.
 # A control channel is created between the server and client to control the client’s actions and synchronize the start of the various tests. The server and the client negotiate the test suite.
 # The NDT client and the NDT server performs the negotiated test suite. The client opens new data channels back to the server for testing purposes. Allowing the client to open connections makes it easy to get past client-side firewall boxes.
 # The server extracts the Web100 data and analyzes the connection for faults.
 # The results are recorded in the servers’ log file and the results are returned to the client for display to the user.

== Build Instructions ==

=== Requirements ===

In order to build the NDT programs, the following dependencies should be fulfilled:
 * Web100 enhancements (user library for compilation, Linux kernel for running NDT server)
 * pcap library
 * !I2Util library
 * zlib library (for compressing test results)
 * odbc library (to support writing test results to the SQL database)
 * Java SDK (to build Java Applet-based client, Admin.class and the JAnalyze application)

==== Web100 patched Linux kernel ====

Web100 patch for the Linux kernel can be obtained from the [http://www.web100.org/download/ Web100 download page].

The base Linux kernel can be obtained from the [kernel.org] ftp site:
 * ftp [ftp.kernel.org] and change directory to the proper Linux kernel directory

Unpack the kernel tar file in the {{{/usr/src}}} directory, unpack the Web100 kernel patch, and apply the patch:
 * {{{patch –p3 < path-to-kernel-patch-file}}}

It is important to note that kernel patch files are keyed to a specific version of the Linux kernel. You must look at the Web100 kernel readme file to determine which kernel version you need to download/patch.

Configure and build the new kernel; note: you must enable _“Prompt for development code ...”_ so that Web100 options appear under _“Networking Options.”_ Modify the boot loader configuration file, reboot, and test the new system.

==== Web100 user library ====

Web100 user library can be obtained from the [http://www.web100.org/download/ Web100 download page].

After downloading the Web100 user library sources, unpack the downloaded tar file and use the standard GNU automake commands:
 # Change directory to package directory
 # Create local make files (./configure {--prefix=dir})
 # Build library and utility files (make)
 # Install library and utility files (make install)

Once the kernel is built and running, it will automatically begin collecting data on every TCP connection to/from the server. The user library file contains the routines needed to extract that kernel data from the system. The administrator can verify that the kernel is recording properly by using the /usr/local/bin/gutil program. This X-windows based GUI allows the administrator to monitor any TCP connection going to/from the server.

=== Sources ===

NDT sources can be obtained in two ways:
 * by checking out the newest code from the subversion repository ({{{http://ndt.googlecode.com/svn/trunk}}})
 * by downloading the newest tar package from the download page ({{{http://code.google.com/p/ndt/downloads}}})